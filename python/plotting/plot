#!/usr/bin/env python
from argparse import ArgumentParser
from sys import exit
from math import sqrt
import json
import subprocess
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import numpy as np


def main():
    '''
    Make plots from SARS-CoV-2 simulation in Slovakia
    '''

    parser = ArgumentParser(description='Yay, make Slovak SARS-CoV-2 plots!')
    parser.add_argument('-c', '--config',
                        type=str, default='../../config/plot.json',
                        help='location of configuration file')
    parser.add_argument('-t', '--type',
                        type=str, default='slovakia',
                        help='plot type')
    required_arguments = parser.add_argument_group('required arguments')
    required_arguments.add_argument('-i', '--input-file',
                                    type=str, required=True,
                                    help='input file path')
    args = parser.parse_args()

    try:
        infile = open(args.config, "r")
        config = json.load(infile)
        infile.close()
    except IOError:
        print("ERROR: Configuration file not found!")
        exit(1)

    try:
        infile = open(args.input_file, "r")
        indata = json.load(infile)
        infile.close()
    except IOError:
        print("ERROR: Input file not found!")
        exit(1)

    print('Number of municipalities: ' + str(len(indata)))

    if args.type == 'slovakia':
        plot_slovakia(indata, config)
    elif args.type == 'slovakia_map':
        plot_slovakia_map(indata, config)
    elif args.type == 'by_municipality':
        plot_by_municipality(indata, config)


def plot_slovakia(indata, config):
    '''
        Create plots for the whole Slovakia.
    '''

    outfile_path = '../../plots/slovakia'

    lines = config['slovakia']['lines']
    days = indata['Nitra']['simulation_days']

    height = len(lines)
    width = len(days)
    line_arr = [[0 for x in range(width)] for y in range(height)]

    for index, key in enumerate(indata):
        place = indata[key]

        percent = round(100.*index/len(indata))
        print(str(percent) + '%, municipality: ' + key)

        for line_index, line in enumerate(lines):
            line_arr[line_index] = np.add(line_arr[line_index], place[line])

    for index, line in enumerate(lines):
        plt.plot(days, line_arr[index], label=line)

    plt.title('Slovakia')
    plt.xlabel('Days')
    plt.ylabel('Number of people')
    plt.yscale(config['type']['by_municipality']['yscale'])
    plt.legend(lines)
    plt.grid()

    outfile_path += '.pdf'
    plt.savefig(outfile_path)

    plt.clf()


def plot_by_municipality(indata, config):
    '''
        Create plots for every municipality in Slovakia.
    '''

    for index, key in enumerate(indata):
        place = indata[key]
        outfile_path = '../../plots/by_municipality/' + key

        percent = round(100.*index/len(indata))
        print(str(percent) + '%, municipality: ' + key)

        days = place['simulation_days']
        lines = config['by_municipality']['lines']

        for line in lines:
            lines_to_sum = line.split('+')
            line_sum = np.zeros(len(days))
            for lin in lines_to_sum:
                line_sum = np.add(line_sum, place[lin])

            plt.plot(days, line_sum, label=line)

        plt.title(key)
        plt.xlabel('Days')
        plt.ylabel('Number of people')
        plt.yscale(config['type']['by_municipality']['yscale'])
        plt.legend(lines)
        plt.grid()

        outfile_path += '.pdf'
        plt.savefig(outfile_path)

        plt.clf()


def plot_slovakia_map(indata, config):
    '''
        Create dot on the map for every municipality in Slovakia.
        To create video run:
        ffmpeg -framerate 4 -i day_%03d.png -c:v libx264 -r 30 \
               -pix_fmt yuv420p slovakia_map.mp4
    '''

    var_name = config['slovakia_map']['var_name']
    var_title = config['slovakia_map']['var_title']
    days = indata['Nitra']['simulation_days']

    outfile_path_base = '../../plots/slovakia_map/'
    outfile_path_base += var_name
    outfile_path_base += '_day_'

    lon = np.array([])
    lat = np.array([])
    pop = np.array([])
    for index, key in enumerate(indata):
        place = indata[key]

        percent = round(100.*index/len(indata))
        print(str(percent) + '%, municipality: ' + key)

        lon = np.append(lon, place['longitude'])
        lat = np.append(lat, place['latitude'])
        pop = np.append(pop, sqrt(place['size']*0.01) + 1)

    var = np.empty((0, len(indata)), int)
    for index, day in enumerate(days):
        var_one_day = np.array([])

        percent = round(100.*index/len(days))
        print(str(percent) + '%, day: ' + str(day))

        for key in indata:
            place = indata[key]

            var_one_day = np.append(
                var_one_day,
                place[var_name][index])

        var = np.append(var, [var_one_day], axis=0)

    for day in days:
        percent = round(100.*day/len(days))
        print(str(percent) + '%, plot: ' + str(day))

        outfile_path = outfile_path_base
        var_max = np.amax(var)
        if var_max > 1e4:
            color_map = colors.ListedColormap(
                ['blue', 'gold', 'orange', 'orangered', 'red', 'maroon'])
            color_norm = colors.BoundaryNorm(
                [0, 1, 10, 100, 1e3, 1e4, np.amax(var)], 6)
        elif var_max > 1e3:
            color_map = colors.ListedColormap(
                ['blue', 'gold', 'orange', 'red', 'maroon'])
            color_norm = colors.BoundaryNorm(
                [0, 1, 10, 100, 1e3, np.amax(var)], 5)
        elif var_max > 1e2:
            color_map = colors.ListedColormap(
                ['blue', 'gold', 'red', 'maroon'])
            color_norm = colors.BoundaryNorm(
                [0, 1, 10, 100, np.amax(var)], 4)
        elif var_max > 10:
            color_map = colors.ListedColormap(
                ['blue', 'gold', 'maroon'])
            color_norm = colors.BoundaryNorm(
                [0, 1, 10, np.amax(var)], 3)
        else:
            print('ERROR: Color range too small!')
            print('       var_max = ' + str(var_max) + '<= 10')
            exit(1)
        plt.scatter(lon, lat, s=pop, c=var[day],
                    cmap=color_map,
                    norm=color_norm)

        plt.title('Day: ' + str(day))
        plt.xlabel('Longitude')
        plt.ylabel('Latitude')
        cbar = plt.colorbar(orientation='horizontal')
        cbar.set_label('Number of ' + var_title)

        outfile_path += str(day).zfill(3)
        outfile_path += '.png'
        plt.savefig(outfile_path, dpi=300)

        plt.clf()

    command = 'ffmpeg -framerate 4 -i ../../plots/slovakia_map/'
    command += var_name
    command += '_day_%03d.png -c:v libx264 -r 30 -pix_fmt yuv420p '
    command += '../../plots/slovakia_map/'
    command += var_name
    command += '.mp4'
    subprocess.Popen(command.split(), stdout=subprocess.PIPE)


if __name__ == '__main__':
    main()
